/************************************************************************/
/* namespace cv                                                         */
/************************************************************************/
#include "Opencv.hpp"
#include "FileOperation.hpp"
#include "PCL.hpp"

/************************************************************************/
/* namespace pxc                                                        */
/************************************************************************/
#include <pxcimage.h>
#include <pxcsession.h>
#include <pxcsensemanager.h>
#include <pxcprojection.h>

//thread
#include <thread>
#include <boost\atomic.hpp>
using boost::atomic_bool;
using std::thread;

/************************************************************************/
/* Realsense Operation.                                                 */
/************************************************************************/
class MyRealsense: public FileOperation
{
public:
	/**
	*  @brief testRegistration: End-TO-End Test RANSAC+ICP
	*  @param Dir					save color/depth data, for example: ".\\xxx\\"
	*  @param width, height, fps    camera setting
	*/
	MyRealsense(	string& Dir, 
					int width = 320, 
					int height = 240, 
					float fps = 60);
	/**
	*  @brief captureColorandDepth: Acquire color and depth data, save to `.\snap\color` and `.\snap\depth`
	*  @return	0: success; -1: pxcdevice error; -2: pxcproject cann't create 
	*/
	int captureColorandDepth();
	/**
	*  @brief configRealsense: configure Realsense and get ready for starting
	*  @return	0: success; -1: pxcdevice error; -2: pxcproject cann't create
	*/
	int configRealsense();
	/**
	*  @brief testRegistration: End-TO-End Test RANSAC+ICP
	*  @param model_path		which model to load (.pcd file format)
	*  @param grasp_path		which model to load (.obj file format)
	*  @param PointCloudScale	
	*/
	int testRegistration(	const string model_path, 
							const string grasp_path, 
							double PointCloudScale,
							RegisterParameter &para	);
	/**
	*  @brief testDataSet: 
	*  @param model_path   which model to load (.pcd file format)
	*  @param grasp_path   which model to load (.obj file format)
	*/
	int testDataSet(	const string model_path,
						const string grasp_path,
						double PointCloudScale,
						RegisterParameter &para,
						string dir,
						string categoryname,
						int from,
						int seg_index);
	/**
	*  @brief PXCImage2Mat: Convert RealSense's PXCImage to Opencv's Mat
	*  @param pxc   input PXCImage* captured by Intel Realsense
	*  @return		output converted Opencv's Mat
	*/
	cv::Mat PXCImage2Mat(PXCImage* pxc);
private:
	/**
	*  @brief getSavePath: Save path composed of dir path, time slot and image framecnt
	*  @param dir		directory path
	*  @param slot		time slot, e.g. 2016-5-31-22:11:20
	*  @param framecnt  framnt index
	*  @return			{dir}_{slot}_{framecnt}.png
	*/
	string getSavePath(	const string dir, 
						time_t slot, 
						long framecnt);
	/**
	*  @brief savePCD: Save points cloud generated by Intel Realsense to .pcd file
	*  @param filename   which filename want to save
	*  @param pSet		 2D point set
	*  @param vertices   the whole 3D points cloud data 
	*  @return		SUCCESS / FAILED
	*/
	int savePCD(	const string filename, 
					PointSet &pSet, 
					vector<PXCPoint3DF32> &vertices);

private:
	// DataAcquire Setting
	string dir_;
	string depthDir_;
	string colorDir_;
	// Realsense
	PXCSession *pxcsession_ = 0;
	PXCSenseManager *pxcsm_ = 0;
	PXCCapture::Device *pxcdev_ = 0;
	PXCProjection *projection_ = 0;
	PXCSizeI32 camera_;
	pxcF32 fps_;
	// Concurrent
	atomic_bool wait_;

};